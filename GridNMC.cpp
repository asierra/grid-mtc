/*
 * Code generated by ObjectDomain using CPP Code Generator 2.0
 */
#include <stdio.h>
#include <math.h>
#include "GridNMC.h"


static float NMCR    =  31.204359052;     /*  Radio al Ecuador */
static float deg2rad  = 0.01745329252;
static float deg10   =  0.1745329252;    /*  Ajuste de 10 Long. */
#define sqr(x)    ((x)*(x))


static short ks[] = { 14, 13, 12, 11, 10,  // Posiciones del renglón
	9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
};

static short fs[] = { 
	   0,   19,   40,   63,   88,  115,  144,  175,  208,  243, 
	 280,  319,  360,  403,  448,  495,  542,  589,  636,  683, 
	 730,  777,  824,  871,	 918,  965, 1012, 1059, 1106, 1153, 
	1200, 1247, 1294, 1341, 1388, 1435, 1482, 1529, 1574, 1617, 
	1658, 1697, 1734, 1769, 1802, 1833, 1862, 1889, 1914, 1937, 
	1958
};


GridNMC::GridNMC() {
   N = 1977;
   dI = 46;
   dJ = 50;
}

float GridNMC::la(int i, int j) {
   return (90. - 2.*atan2(sqrt(sqr(i-23) + sqr(j-25)),NMCR)/deg2rad);
}

float GridNMC::lo(int i, int j) {
   return (atan2((double)j-25.,(double)(i - 23))/deg2rad + 10.);
}

float GridNMC::lof(float i, float j) {
   return (atan2((double)j-25.,(double)(i - 23))/deg2rad + 10.);
}

float GridNMC::laf(float i, float j) {
   return (90. - 2.*atan2(sqrt(sqr(i-23) + sqr(j-25)),NMCR)/deg2rad);
}

float GridNMC::gi(float lo, float la) {
   return (23 + NMCR*cos(lo*deg2rad - deg10)*tan(M_PI_4 - la*deg2rad/2.));
}

float GridNMC::gj(float lo, float la) {
   return (25 + NMCR*sin(lo*deg2rad - deg10)*tan(M_PI_4 - la*deg2rad/2.));
}

int GridNMC::idx(int i, int j)
{
   if (i < ks[j] || i>(dI - ks[j]) || j<0 || j > dJ) 
     return -1;
   
   return fs[j] + i - ks[j];
}


int GridNMC::getIJ(int idx, int &i, int &j)
{
	i=-1, j = -1;

	if (0 <= idx && idx < N) {
		j = 0;
		while (fs[j+1] <= idx && j < 50)
			j++;

		i = idx - fs[j] + ks[j];
		
		return 0;
	}

	return -1;
}


int GridNMC::ii(int idx)
{
	int i, j;

	getIJ(idx, i, j);

	return i;
}


int GridNMC::ij(int idx)
{
	int i, j;

	getIJ(idx, i, j);

	return j;
}


float GridNMC::la(int idx)
{
	int i, j;
	
	getIJ(idx, i, j);
	
	return la(i, j);
}


float GridNMC::lo(int idx)
{
	int i, j;
	
	getIJ(idx, i, j);
	
	return lo(i, j);
}

